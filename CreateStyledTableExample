package org.example;

import com.google.common.base.Splitter;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.pdf.*;
import org.docx4j.Docx4J;
import org.docx4j.convert.out.FOSettings;
import org.docx4j.jaxb.Context;
import org.docx4j.model.table.TblFactory;
import org.docx4j.openpackaging.packages.WordprocessingMLPackage;
import org.docx4j.wml.*;

import java.io.*;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;

public class CreateStyledTableExample {

    private static ObjectFactory factory;

    public static void main(String[] args) throws Exception {

        WordprocessingMLPackage wordPackage = WordprocessingMLPackage.load(new java.io.File("src/main/files/template.docx"));
        factory = Context.getWmlObjectFactory();

        int writableWidthTwips = wordPackage.getDocumentModel().getSections().get(0).getPageDimensions().getWritableWidthTwips();
        int columnNumber = 8;

        Tbl tbl = TblFactory.createTable(4, 8, writableWidthTwips / columnNumber);
        addTableBorders(tbl);

        String contentOriginal = "Palatino Linotype";
        String newContent =  "";
        for(final String substring : Splitter.fixedLength(8).split(contentOriginal)){
            System.out.println(substring);
            newContent = newContent + substring + System.getProperty("line.separator");
        }

        System.out.println(newContent);

        List<Object> rows = tbl.getContent();
        int rowCounter = 0;
        for (Object row : rows) {
            Tr tr = (Tr) row;
            List<Object> cells = tr.getContent();
            int cellCounter = 0;
            for (Object cell : cells) {
                Tc td = (Tc) cell;
                P p = createStyledParagraph(newContent);
                td.getContent().add(p);
                cellCounter++;

                if(rowCounter==0){
                    addCellBorders(td);
                    CTShd shd = factory.createCTShd();
                    shd.setVal(org.docx4j.wml.STShd.CLEAR);
                    shd.setColor( "auto");
                    //shd.setFill( "D0CECE");   // ça donne un grey foncé
                    shd.setFill( "E7E6E6");
                    shd.setThemeFill(STThemeColor.BACKGROUND_2);
                    shd.setThemeFillTint( "66");
                    td.getTcPr().setShd(shd);


                    BooleanDefaultTrue b = new BooleanDefaultTrue();
                    b.setVal(false);
                    td.getTcPr().setNoWrap(new BooleanDefaultTrue());

                    TblWidth tdw = new TblWidth();
                    tdw.setType("dxa");
                    td.getTcPr().setTcW(tdw);
                }
            }
            rowCounter++;
        }

        wordPackage.getMainDocumentPart().getContent().add(tbl);

        File file = new File("./src/main/files/Example-pdf-1.pdf");
        OutputStream os = new java.io.FileOutputStream(file);

        FOSettings settings = new FOSettings();
        settings.setWmlPackage(wordPackage);
        Docx4J.toFO(settings, os, Docx4J.FLAG_EXPORT_PREFER_XSL);

        os.flush();
        os.close();

        File file1 = new File("./src/main/files/Example-pdf-1.pdf");
        InputStream inputStream1 = new FileInputStream(file1);
        byte[] pdfFilesAsByteArray1 = new byte[(int) file1.length()];
        inputStream1.read(pdfFilesAsByteArray1);

        File file2 = new File("./src/main/files/Example-pdf-2.pdf");
        InputStream inputStream2 = new FileInputStream(file2);
        byte[] pdfFilesAsByteArray2 = new byte[(int) file2.length()];
        inputStream2.read(pdfFilesAsByteArray2);

        List<byte[]> pdfFilesAsByteArray = new ArrayList<>();
        pdfFilesAsByteArray.add(pdfFilesAsByteArray1);
        pdfFilesAsByteArray.add(pdfFilesAsByteArray2);

        ByteArrayOutputStream osFinal = mergePDF(pdfFilesAsByteArray);
        File file3 = new File("./src/main/files/Example-pdf-3.pdf");
        OutputStream os3 = new java.io.FileOutputStream(file3);
        osFinal.writeTo(os3);
        os3.flush();
        os3.close();

        manipulatePdf("./src/main/files/Example-pdf-3.pdf","./src/main/files/Example-pdf-4.pdf");

    }

    private static P createStyledParagraph(String content){
        P p = factory.createP();
        R r = factory.createR();
        Text t = factory.createText();
        t.setValue(content);
        r.getContent().add(t);
        p.getContent().add(r);
        RPr rpr = factory.createRPr();

        RFonts font = new RFonts();
        font.setAscii("Palatino Linotype");
        rpr.setRFonts(font);
        r.setRPr(rpr);

        // Centrer le Text
        PPr ppr = factory.createPPr();
        Jc justification = factory.createJc();
        justification.setVal(JcEnumeration.CENTER);
        ppr.setJc(justification);
        p.setPPr(ppr);

        ppr.setSuppressOverlap(new BooleanDefaultTrue());

        BooleanDefaultTrue b = new BooleanDefaultTrue();
        b.setVal(false);
        ppr.setKeepLines(b);
        return p;
    }

    private static void addTableBorders(Tbl table) {
        CTBorder border = new CTBorder();
        border.setColor("auto");
        border.setSz(new BigInteger("4"));
        border.setSpace(new BigInteger("0"));
        border.setVal(STBorder.SINGLE);

        TblBorders borders = new TblBorders();
        borders.setBottom(border);
        borders.setLeft(border);
        borders.setRight(border);
        borders.setTop(border);
        borders.setInsideH(border);
        borders.setInsideV(border);
        table.getTblPr().setTblBorders(borders);

        CTTblCellMar cTTblCellMar = new CTTblCellMar();
        TblWidth cTTblCellMarWidth = new TblWidth();
        cTTblCellMarWidth.setW(new BigInteger("300"));
        cTTblCellMar.setBottom(cTTblCellMarWidth);

        table.getTblPr().setTblCellMar(cTTblCellMar);


    }


    private static void addCellBorders(Tc tc) {
        CTBorder border = new CTBorder();
        border.setVal(STBorder.NONE);

        TcPrInner.TcBorders borders = new TcPrInner.TcBorders();
        borders.setLeft(border);
        borders.setRight(border);
        tc.getTcPr().setTcBorders(borders);
    }


    public static ByteArrayOutputStream mergePDF(List<byte[]> pdfFilesAsByteArray) throws IOException {

        ByteArrayOutputStream outStream = new ByteArrayOutputStream();
        Document document = null;
        PdfCopy writer = null;

        for (byte[] pdfByteArray : pdfFilesAsByteArray) {

            try {
                PdfReader reader = new PdfReader(pdfByteArray);
                int numberOfPages = reader.getNumberOfPages();

                if (document == null) {
                    document = new Document(reader.getPageSizeWithRotation(1));
                    writer = new PdfCopy(document, outStream); // new
                    document.open();
                }
                PdfImportedPage page;
                for (int i = 0; i < numberOfPages;) {
                    ++i;
                    page = writer.getImportedPage(reader, i);
                    writer.addPage(page);
                }
            }

            catch (Exception e) {
                e.printStackTrace();
            }

        }

        document.close();
        outStream.close();
        return outStream;

    }


    public static void manipulatePdf(String src, String dest) throws IOException, DocumentException {
        PdfReader reader = new PdfReader(src);
        int n = reader.getNumberOfPages();
        PdfStamper stamper = new PdfStamper(reader, new FileOutputStream(dest));
        PdfContentByte pagecontent;
        for (int i = 0; i < n; ) {
            pagecontent = stamper.getOverContent(++i);
            ColumnText.showTextAligned(pagecontent, Element.ALIGN_RIGHT,
                    new Phrase(String.format("page %s of %s", i, n)), 559, 806, 0);
        }
        stamper.close();
        reader.close();
    }



}
